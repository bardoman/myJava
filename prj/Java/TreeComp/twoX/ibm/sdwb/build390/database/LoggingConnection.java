package com.ibm.sdwb.build390.database;

import java.util.*;
import java.sql.*;
import java.rmi.*;
import java.io.*;

public class LoggingConnection implements java.sql.Connection {
    private Connection realConnection = null;
    private StringWriter theString = new StringWriter();
    private BufferedWriter logOfConnection = new BufferedWriter(theString);

    LoggingConnection(Connection tempRealConnection){
        realConnection = tempRealConnection;
    }

    public Statement createStatement() throws SQLException {
        return new LoggingStatement(realConnection.createStatement(), logOfConnection);
    }

    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency,
                                     int resultSetHoldability)  throws SQLException {

        return new LoggingStatement(realConnection.createStatement(resultSetType,resultSetConcurrency,resultSetHoldability), logOfConnection);

    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException{
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareStatement(sql,columnNames);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareStatement(sql,columnIndexes);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareStatement(sql, autoGeneratedKeys);

    }

    public PreparedStatement prepareStatement(String sql,
                                              int resultSetType,
                                              int resultSetConcurrency) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareStatement(sql, resultSetType,resultSetConcurrency);
    }

    public PreparedStatement prepareStatement(String sql,
                                              int resultSetType,
                                              int resultSetConcurrency,
                                              int resultSetHoldability) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareStatement(sql, resultSetType,resultSetConcurrency,resultSetHoldability);

    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareCall(sql);
    }

    public CallableStatement prepareCall(String sql,
                                         int resultSetType,
                                         int resultSetConcurrency,
                                         int resultSetHoldability) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);

    }

    public String nativeSQL(String sql) throws SQLException {
        try {
            logOfConnection.write(sql);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return realConnection.nativeSQL(sql);
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        try {
            logOfConnection.write("Setting auto commit to " + autoCommit);
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        realConnection.setAutoCommit(autoCommit);
    }

    public boolean getAutoCommit() throws SQLException {
        return realConnection.getAutoCommit();
    }

    public void commit() throws SQLException {
        try {
            logOfConnection.write("Commit");
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        realConnection.commit();
    }

    public void rollback() throws SQLException {
        try {
            logOfConnection.write("rollback");
            logOfConnection.newLine();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        realConnection.rollback();
    }

    public void close() throws SQLException{
        try {
            logOfConnection.flush();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        realConnection.close();
    }

    public boolean isClosed() throws SQLException {
        return realConnection.isClosed();
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        return realConnection.getMetaData();
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        realConnection.setReadOnly(readOnly);
    }

    public boolean isReadOnly() throws SQLException {
        return realConnection.isReadOnly();
    }

    public void setCatalog(String catalog) throws SQLException {
        realConnection.setCatalog(catalog);
    }

    public String getCatalog() throws SQLException {
        return realConnection.getCatalog();
    }

    public void setTransactionIsolation(int level) throws SQLException {
        realConnection.setTransactionIsolation(level);
    }

    public int getTransactionIsolation() throws SQLException {
        return realConnection.getTransactionIsolation();
    }

    public SQLWarning getWarnings() throws SQLException {
        return realConnection.getWarnings();
    }

    public void clearWarnings() throws SQLException {
        realConnection.clearWarnings();
    }

    //jdk1.2.2 starts
    public void setTypeMap(Map a){
    }



    public Statement createStatement(int c, int e){
        return null;
    }

    public Map getTypeMap(){
        return null;
    }

    public CallableStatement prepareCall(String sql,int V,int n){
        return null;
    }


    public String toString(){
        String returnLog = null;
        try {
            logOfConnection.close();
            theString.flush();
            returnLog = theString.toString();
        } catch (IOException ioe) {
// Ken don't worry about this.
        }
        return returnLog;
    }

    public void setHoldability(int hold) throws SQLException {
        realConnection.setHoldability(hold);
    }

    public int getHoldability() throws SQLException {
        return realConnection.getHoldability();
    }


    public Savepoint setSavepoint() throws SQLException {
        return realConnection.setSavepoint();

    }

    public Savepoint setSavepoint(String name) throws SQLException {
        return realConnection.setSavepoint(name);
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        realConnection.rollback(savepoint);
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        realConnection.releaseSavepoint(savepoint);
    }
}

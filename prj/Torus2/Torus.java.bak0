
import java.util.*;

public class Torus
{
    static char legalChars[]=
    {
        'A','B','C','D','E','F','G',
        'H','I','J','K','L','M','N',
        'O','P','Q','R','S','T','U',
        'V','W','X','Y','Z','0','1',
        '2','3','4','5','6','7','8','9'
    };

    static String colHdrValues[]=
    {
        "A","B","C","D","E","F","G","H","I","J","K","L","M",
        "N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
    };

    static Vector legalCharsVect = new Vector();

    static
    {
        for(int i=0;i!=legalChars.length;i++)
        {
            legalCharsVect.add(new Character(legalChars[i]));
        }
    }

    static String header = "==>A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z";

    int majorCirc;
    int minorCirc;

    int pageCols = 26;
    int pageRows = 25;
    int pageCnt;

    Character torus[][]; 

    char msgBuffer[];

    String msgs[] = 
    {
        "", 
    };

    Random rand = new Random();

    Vector msgLocs = new Vector();

    public Torus(int pageCnt)
    {
        this.pageCnt = pageCnt;

        minorCirc = pageRows;

        majorCirc = pageCols * pageCnt;

        //***BE
        String str = "";
        for(int i=0;i!=colHdrValues.length;i++)
        {
            str+=colHdrValues[i];
        }

        for(int n=0;n!=25;n++)
        {
            msgs[0]+=str;
        }

        //***BE

        torus = new Character[majorCirc][minorCirc];

        addMessages();

        fillFreeRand();

        showPages();

        //  showLocs();
    }

    void showLocs()
    {
        int oldLoc[]=new int[3];
        int newLoc[]=new int[3];

        boolean first=true;

        for(int i=0;i!=msgLocs.size();i++)
        {
            int loc[] =(int[]) msgLocs.get(i);

            int page = (loc[0]/pageCols)+1;

            int col = (loc[0] % pageCols)-1;

            newLoc[0] = loc[1];
            newLoc[1] = col;
            newLoc[2] = page;

            if(!first)
            {
                int clue[] = getClue(oldLoc, newLoc);

                System.out.println("clue=>"+clue[0]+","+clue[1]+","+clue[2]);
            }
            else
            {
                first = false;
            }

            oldLoc[0] = loc[1];
            oldLoc[1] = col;
            oldLoc[2] = page;

            System.out.println("loc=>"+loc[1]+","+colHdrValues[col]+","+ page);

            System.out.println("Msg["+i+"]="+msgs[i]);
        }
    }

    int [] getClue(int oldLoc[],int newLoc[])
    {
        int tmp[]=new int[3];

        if(newLoc[0]>oldLoc[0])
        {
            tmp[0]= newLoc[0]-oldLoc[0];
        }
        else
            if(newLoc[0]==oldLoc[0])
        {
            tmp[0]=0;
        }
        else
        {
            tmp[0]= pageRows-oldLoc[0]+newLoc[0];
        }

        if(newLoc[1]>oldLoc[1])
        {
            tmp[1]= newLoc[1]-oldLoc[1];
        }
        else
            if(newLoc[1]==oldLoc[1])
        {
            tmp[1]=0;
        }
        else
        {
            tmp[1]= pageCols-oldLoc[1]+newLoc[1];
        }

        if(newLoc[2]>oldLoc[2])
        {
            tmp[2]= newLoc[2]-oldLoc[2];
        }
        else
            if(newLoc[2]==oldLoc[2])
        {
            tmp[2]=0;
        }
        else
        {
            tmp[2]= pageCnt-oldLoc[2]+newLoc[2];
        }

        return tmp;
    }

    void addMessages()
    {
        for(int n=0;n!=msgs.length;n++)
        {
            msgs[n] = cleanMsg(msgs[n]);

            //  msgs[n]+= Integer.toString(rand.nextInt(10));

            msgBuffer = msgs[n].toCharArray();

            int loc[]=findFree(msgBuffer.length);

            msgLocs.add(loc);

            addMsg(loc,msgBuffer.length);

        }
    }

    int [] findFree(int msgLength)
    {
        int loc[]=new int[2];        

        boolean locFound=false;

        while(!locFound)
        {
            loc[0]= rand.nextInt(majorCirc);
            loc[1]= rand.nextInt(minorCirc);

            locFound = isFree(loc,msgLength+1);
        }
        return loc;
    }

    boolean addMsg(int loc[],int cnt)
    {
        boolean free=false;

        if(cnt==0)return true;

        torus[loc[0]][loc[1]]= new Character(msgBuffer[cnt-1]);

        loc[0]++;
        if(loc[0]==majorCirc)
        {
            loc[0]=0;
        }
        loc[1]++;
        if(loc[1]==minorCirc)
        {
            loc[1]=0;
        }
        free = addMsg(loc,--cnt);

        return free;
    }

    boolean isFree(int loc[], int cnt)
    {
        boolean free=false;

        if(cnt==0)return true;

        if(torus[loc[0]][loc[1]] == null)
        {
            loc[0]++;
            if(loc[0]==majorCirc)
            {
                loc[0]=0;
            }
            loc[1]++;
            if(loc[1]==minorCirc)
            {
                loc[1]=0;
            }
            free = isFree(loc,--cnt);

            return free;
        }
        return false;
    }

    String cleanMsg(String str)
    {
        Character ch;

        Vector tmpVect = new Vector();

        str = str.toUpperCase();

        for(int i=0;i!=str.length();i++)
        {
            ch = new Character(str.charAt(i));

            if( legalCharsVect.contains(ch))
            {
                tmpVect.add(ch);
            }
        }

        String retStr=new String();

        for(int c=0;c!=tmpVect.size();c++)
        {
            retStr+=((Character)tmpVect.get(c)).charValue();
        }

        return retStr;
    }

    void showPages()
    {
        char page[][];

        for(int p=0; p!=pageCnt;p++)
        {
            page=getPage(p);

            printPage(p,page);
        }
    }

    void printPage(int pageNum,char page[][])
    {
        String str;
        String rowHdr;

        System.out.println(header);

        for(int row=0;row!=pageRows;row++)
        {
            str="";

            for(int col=0;col!=pageCols;col++)
            {
                str+=page[col][row]+",";
            }
            rowHdr = Integer.toString(row+1);

            if(rowHdr.length()!=2)
            {
                rowHdr+=" ";
            }

            System.out.println(rowHdr+":"+str);
        }

        System.out.println("***Page_"+(pageNum+1)+"***\n");
    }

    char [][] getPage(int n)
    {
        char chs[][]=new char [pageCols][pageRows];

        int pageOfs = n * pageCols;

        for(int col=0;col!=pageCols;col++)
        {
            for(int row=0;row!=pageRows;row++)
            {
                chs[col][row]= torus[col+pageOfs][row].charValue();
            }
        }

        return chs;
    }

    static boolean isOdd(int n)
    {
        if((n % 2) == 0)
        {
            return false;
        }
        return true;
    }

    void fillFreeRand()
    {
        for(int x=0;x!=majorCirc;x++)
            for(int y=0;y!=minorCirc;y++)
            {
                if( torus[x][y] == null)
                {
                    //torus[x][y]= new Character(legalChars[rand.nextInt(legalChars.length)]);
                    torus[x][y]= new Character(' ');

                }
            }
    }

    public static void main(String args[])
    {

        new Torus(2);
    }
}


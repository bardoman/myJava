#Wed May 30 17:39:12 EDT 2007
SHRC029=Not enough memory left on the system
SHRC028=Permission Denied
SHRC027=Shared cache name is too long
SHRC026=Cannot create cache of requested size\: Please check your SHMMAX and SHMMIN settings
SHRC025=error attaching shared memory
SHRC024=shared memory detach error
SHRC023=Cache does not exist
SHRC022=Error creating shared memory region
SHRC021=An unknown error code has been returned
SHRC020=An error has occured while opening semaphore
J9TI024=Method exit without the return value.
J9TI023=Get extended frame info for a thread list.
J9TI022=Get extended frame info for all stack traces.
J9TI021=Get extended frame info.
J9TI020=Gets the OS thread ID from a jthread
SHRC019=request length is too small
SHRC018=cannot allocate memory
SHRC017=Error code\: %d
SHRC016=Shared Class Cache Error\:
SHRC015=Shared Class Cache Error\: Invalid flag
SHRC014=Shared cache "%1$s" semaphore remove failed
SHRC013=Shared cache "%1$s" memory remove failed
SHRC012=Cannot remove shared cache "%1$s" as there are JVMs still attached to the cache
SHRC011=Error\: Cannot open shared class cache
SHRC010=Shared Cache "%1$s" is destroyed
J9TI019=Sets notification mode for extended events, allowing thread-level selectivity
J9TI018=Sets a method for selective entry/exit notification.
J9TI017=Controls various VM and compiling options. 
J9TI016=Allow inlining in the presence of method enter/exit events (resulting in possibly inaccurate reporting of enter/exit)
J9TI015=Request a Java Lock Monitor (JLM) dump.
J9TI014=Controls Java Lock Monitor (JLM) (COM_IBM_JLM_START, COM_IBM_JLM_START_TIME_STAMP, COM_IBM_JLM_STOP, COM_IBM_JLM_STOP_TIME_STAMP).
J9TI013=Allows callbacks for instrumentable allocates (those not reporteed by VMObjectAlloc).
J9TI012=Add a dynamic -Xdump option
J9TI011=Add a dynamic -Xtrace option
J9TI010=Method entry with extended information about method type.
J9VM052=\   -Xjni\:arrayCacheMax\=[<x>|unlimited] set maximum size of JNI cached array\n
J9VM051=Usage\:\n
J9VM050=-Xjni\: unrecognized option --> '%s'
SHRC009=Shared Classes Cache opened\: %1$s size\: %2$d bytes
SHRC008=Shared Classes Cache created\: %1$s size\: %2$d bytes
SHRC007=Failed to remove shared class cache "%1$s"
SHRC006=Number of caches expired within last %1$d minutes is %2$d
SHRC005=No shared class caches available
SHRC004=Cannot destroy cache "%1$s"
SHRC003=last detach time
SHRC002=in use
SHRC001=OS shmid
SHRC000=Shared Cache
J9TI009=Indicates the end of a JIT compilation phase. (Not callback safe)
J9TI008=Indicates the start of a JIT compilation phase. (Not callback safe)
J9TI007=Get the current set of extended capabilities via capabilities_ptr.
J9TI006=Relinquish the extended capabilities from capabilities_ptr.
J9TI005=Add the new extended capabilities from capabilities_ptr.
J9TI004=Returns via the capabilities_ptr the extended capabilities available at this time.
J9VM049=JLM hold times not supported
J9TI003=Agent_OnLoad failed for library %s
J9VM048=JLM hold times supported
J9TI002=Agent_OnLoad not found in library %s
J9VM047=JLM not supported
J9TI001=Agent library %1$s could not be opened (%2$s)
J9VM046=JLM supported
J9TI000=Out of memory attempting to load agent library %s
J9VM045=Three-tier system monitors not supported
J9VM044=Three-tier system monitors supported
J9VM043=-----------------------
J9VM042=Threading Configuration
J9VM041=wrong number of arguments
J9VM040=OS stack overflow
J9VM039=-Xscmx is ignored if -Xshareclasses is not specified
J9VM038=-Xthr\: unrecognized option --> '%s'
J9VM037=Failed to allocate monitor
J9VM036=/ by zero
J9VM035=Unable to allocate OutOfMemoryError
J9VM034=jvmri requires trace engine\: run with -Xtrace flag
J9VM033=Fatal error\: failed to initialize %s
J9VM032=Fatal error\: unable to load %1$s\: %2$s
J9VM031=Required class %2$.*1$s must be in the boot classpath, but was found in the application class path in %4$.*3$s
J9VM030=Invalid UTF8 used in JNI function
J9VM029=\tat (Unknown Method)
J9VM028=\tat %2$.*1$s.%4$.*3$s (%6$.*5$s\:%7$u)
J9VM027=\tat %2$.*1$s.%4$.*3$s (%6$.*5$s)
J9VM026=\tat %2$.*1$s.%4$.*3$s (Unknown Source)
J9VM025=\tat %2$.*1$s.%4$.*3$s (Native Method)
J9VM024=Exception in thread "%.*s" 
J9VM023=This may indicate that JAVA_HOME is incorrect, or that class libraries are not installed
J9VM022=Stack map failed, result \= %p - aborting VM
J9VM021=Out of memory for interpreter stack map - aborting VM
J9VM020=Searched in %.*s
J9VM019=Fatal error\: Unable to find and initialize required class %.*s
J9VM018=Could not allocate memory for DLL load table pool
J9VM017=Could not allocate memory for command line option array
J9VM016=Shutdown error for library %1$s(%2$d)\: %3$s
J9VM015=Initialization error for library %1$s(%2$d)\: %3$s
J9VM014=Shutdown error in function %1$s(%2$d)\: %3$s
J9VM013=Initialization error in function %1$s(%2$d)\: %3$s
J9VM012=Unable to unload %1$s\: %2$s
J2JX109=\  -E xxx\=yyy                set system property xxx to value of environment variable yyy at runtime
J9VM011=Unable to load %1$s\: %2$s
J2JX108=\  -g[\:lines,source,vars]    generate a subset (lines, source, and/or vars) of debugging information inside of JXE
J9VM010=Failed to initialize %s
J2JX107=\  -g\:nosym                  embed debugging information inside JXE
J2JX106=\  -g\:sym                    generate a .sym file for debugging, no debugging information inside of JXE
J2JX105=\  -nog                      generate no debugging information for JXE
J2JX104=\  -g                        same as -g\:sym
J2JX103=Could not compile method\: %2$.*1$s/%4$.*3$s%6$.*5$s jitErr 0%7$x
J2JX102=Could not compile native method\: %2$.*1$s/%4$.*3$s%6$.*5$s
J2JX101=Could not compile abstract method\: %2$.*1$s/%4$.*3$s%6$.*5$s
J2JX100=%s is not supported in this configuration
J9VM009=J9VMDllMain failed
J9VM008=J9VMDllMain not found
J9VM007=Command-line option unrecognised\: %s
J9VM006=Invalid command-line option\: %s
J9VM005=Invalid value for environment variable\: %s
J9VM004=Cannot load library required by\: %s
J9VM003=JIT compiler "%s" not found. Will use interpreter.
J9VM002=Options file not found
J9VM001=Malformed value for -Xservice
J9VM000=Malformed value for IBM_JAVA_OPTIONS
EXEL087=\  -Xjni\:<options>               set JNI options
EXEL086=\n  -Xtrace[\:option,...]  control tracing use -Xtrace\:help for more details
EXEL085=\nWARNING\: The command line argument "%s" has been deprecated.\nWARNING\: Use "-jxe <path>" instead.\n
EXEL084=Unable to make a backup copy of file\: %s
EXEL083=Could not open file\: %s
EXEL082=\  -Xlp<x>         set the large page size to <x>
EXEL081=java version "%1$s/%2$s"
EXEL080=java version "%s"
EXEL079=\  -Xscmx<x>       set size of new shared class cache to <x>
EXEL078=\  -Xshareclasses[\:options]  Enable class data sharing (use help for details)\n
EXEL077=\  -Xssi<x>        set java thread stack increment to <x>
EXEL076=JIT  - %s\n
EXEL075=\  -Xquickstart    improve startup time by delaying optimizations
EXEL074=Unable to redirect console I/O to\: %1$s\:%2$d
EXEL073=Internal VM error\: Failed to create Java VM
EXEL072=VM startup error\: Out of memory
EXEL071=Failed to find main class name
EXEL070=ROM image is wrong version
EXEL069=Failed to find ROM image
EXEL068=Internal VM error\: Failed to set array element for %s
EXEL067=Internal VM error\: Failed to create java/lang/String for argument %s
EXEL066=Internal VM error\: Failed to create byte array for argument %s
EXEL065=Internal VM error\: Failed to create argument array
EXEL064=The method main must be declared public, static and void.
EXEL063=Class %s does not implement main()
EXEL062=Internal VM error\: Out of memory converting string to UTF Chars for class name %s
EXEL061=Internal VM error\: Failed to create java/lang/String for class name %s
EXEL060=Internal VM error\: Failed to create byte array for class name %s
JVMP000=Attempt to instrument %.*s through JVMPI was disallowed
EXEL059=Internal VM error\: Failed to find class java/lang/String
EXEL058=Internal VM error\: Out of memory
EXEL056=IBM is a registered trademark of IBM Corp.\nJava and all Java-based marks and logos are trademarks or registered\ntrademarks of Sun Microsystems, Inc.\n
EXEL055=Target\: %s
EXEL054=(c) Copyright IBM Corp. 1991, %s  All Rights Reserved
EXEL053=Licensed Materials - Property of IBM\n\nJ9 - VM for the Java(TM) platform, Version %s
EXEL052=\nWARNING\: The command line argument "%s" has been deprecated.\nWARNING\: Use the -X equivalent.
EXEL051=\nWARNING\: The command line argument "%s" has been deprecated.\nWARNING\: Use "-classpath <path>" or "-cp <path>".
EXEL050=\  -Xrdbginfo\:<host>\:<port>      enable remote debug info server
EXEL049=\  -Xdbginfo\:<symbol file path>  enable debug info server
EXEL048=\  -Xrunjdwp\:<options>           enable debug, JDWP standard options
EXEL047=\n  -Xdbg\:<options>               enable debug, JDWP standard options
EXEL046=\  -Xlp                          enable large page support
EXEL045=\  -Xnocompactgc                 disable compaction
EXEL044=\  -Xcompactgc                   enable compaction
EXEL043=\  -Xcompactexplicitgc           enable compaction on every system GC
EXEL042=\  -Xnocompactexplicitgc         disable compaction on a system GC
EXEL041=\  -Xalwaysclassgc               enable dynamic class unloading on every GC
EXEL040=\  -Xclassgc                     enable dynamic class unloading
SHRC179=ERROR\: The ROMClass segment has been corrupted. Error reading ROMClass at 0x%p
SHRC178=Ignoring noIncrementalUpdates option due to use of singleJVM option
SHRC177=Cannot run safemode due to use of singleJVM option
SHRC176=String invariant relocation enabled
SHRC175=Make the cache persist beyond reboots (Win only)
SHRC174=Enable optimizations for single JVM use
SHRC173=Set the directory for JVM control files (advanced)
SHRC172=AIX cannot create cache of requested size\: Please refer to the Java Diagnostics Guide
SHRC171=z/OS cannot create cache of requested size\: Please check your z/OS system BPXPRMxx settings
EXEL039=\  -Xnoclassgc                   disable dynamic class unloading
SHRC170=Specify name of shared cache\n \t(Use %u to substitute username)
EXEL038=\  -Xgcthreads<x>                set number of GC threads
EXEL037=\nArguments to the following options are expressed a decimal numbers.\n
EXEL036=\  -Xmaxf<x>       maximum percentage of heap free after GC
EXEL035=\  -Xminf<x>       minimum percentage of heap free after GC
ZIPS001=Unable to open %s (Missing export)
EXEL034=A value of 0.3 represents a request of 30%%\n
ZIPS000=Unable to open %1$s (%2$s)
EXEL033=\nArguments to the following options are expressed as a decimal from 0 to 1.
EXEL032=\  -Xmaxe<x>       set maximum size for heap expansion to <x>
EXEL031=\  -Xmine<x>       set minimum size for heap expansion to <x>
EXEL030=\  -Xss<x>         set thread stack size to <x>
SHRC169=Change detected in %2$.*1$s...\n \t...marked %3$d cached classes stale
SHRC168=Total shared class bytes read\=%1$lld. Total bytes stored\=%2$d
SHRC167=Disables class sharing
SHRC166=Attached to cache "%1$s", size\=%2$d bytes
SHRC165=[-Xshareclasses Helper API verbose output enabled]
SHRC164=[-Xshareclasses verbose I/O output enabled]
SHRC163=[-Xshareclasses verbose output enabled]
SHRC162=The wait for the creation mutex while opening shared memory has timed out
J9RI022=initialise JVMRI unable to allocate jvmri dump monitor.
SHRC161=The wait for the creation mutex while creating shared memory has timed out
EXEL029=\  -Xss<x>         set maximum java thread stack size to <x>
J9RI021=jvmri->RunDumpRoutine not supported.
SHRC160=The wait for the creation mutex while opening semaphore has timed out
EXEL028=\  -Xiss<x>        set initial java thread stack size to <x>
J9RI020=jvmri->CreateThread unable to allocate private monitor
EXEL027=\  -Xmso<x>        set OS thread stack size to <x>
EXEL026=\  -Xmrx<x>        set maximum size of remembered set to <x>
EXEL025=\  -Xmr<x>         set remembered set size to <x>
EXEL024=\  -Xmx<x>         set memory maximum to <x>
EXEL023=\  -Xms<x>         set initial memory size to <x>
EXEL022=\  -Xms<x>         set old space size to <x>
EXEL021=\  -Xmoi<x>        set old space increment to <x>
EXEL020=\  -Xmox<x>        set maximum old space size to <x>
SHRC159=Successfully opened shared class cache "%1$s"
SHRC158=Successfully created shared class cache "%1$s"
J9RI019=jvmri->InjectOutOfMemory not supported.
SHRC157=Unable to allocate %1$d bytes of shared memory requested \n \tSuccesfully allocated maximum shared memory permitted (%2$d bytes) \n \t(To increase available shared memory, modify system SHMMAX value)
J9RI018=jvmri->NotifySignal raising signal %d. 
SHRC156=Error copying groupname into cache name
J9RI017=Can't allocate dump agent in jvmri->SetOutOfMemoryHook, func not registered.
SHRC155=Error copying username into cache name
J9RI016=jvmri->SetOutOfMemoryHook called with null callback, func not registered.
SHRC154=Escape character %.*s not valid for cache name
J9RI015=jvmri->RunDumpRoutine\: componentId is out of bounds.
SHRC153=Specify name of shared cache\n \t(Use %g to substitute groupname and %u for username)
J9RI014=jvmri->RunDumpRoutine\: unable to retrieve component data.
SHRC152=Always start JVM regardless of errors/warnings
J9RI013=jvmri->ReleaseRasInfo\: structure has unsupported type field.
SHRC151=Suppress all messages
J9RI012=jvmri->ReleaseRasInfo called with null RasInfo structure.
EXEL019=\  -Xmos<x>        set initial old space size to <x>
SHRC150=Enable helper API verbose output
J9RI011=RasInfo structure has unsupported type field.
EXEL018=\  -Xmo<x>         set initial/maximum old space size to <x>
J9RI010=jvmri->GetRasInfo unable to alloc memory.
EXEL017=\  -Xmo<x>         set old space size to <x>
EXEL016=\  -Xmnx<x>        set maximum new space size to <x>
EXEL015=\  -Xmns<x>        set initial new space size to <x>
EXEL014=\  -Xmn<x>         set initial/maximum new space size to <x>
EXEL013=\  -Xmn<x>         set new space size to <x>
EXEL012=\  -Xmco<x>        set ROM class segment increment to <x>
EXEL011=\  -Xmca<x>        set RAM class segment increment to <x>
EXEL010=Values suffixed with "k" (kilo) or "m" (mega) will be factored accordingly.\n
SHRC149=Enable verbose find/store output
SHRC148=Allow group access to cache (user is default)
J9RI009=jvmri->GetRasInfo unable to alloc memory.
SHRC147=Character %.*s not valid for cache name
J9RI008=jvmri->GetRasInfo unable to get components.
SHRC146=Finding class %1$s in shared cache for cldr id %2$d with Token %4$.*3$s...
J9RI007=jvmri->GetRasInfo unable to alloc memory.
SHRC145=Finding class %1$s in shared cache for cldr id %2$d with URL %4$.*3$s...
J9RI006=jvmri->GetRasInfo called with null RasInfo structure.
SHRC144=Storing class %2$.*1$s in shared cache for cldr id %3$d with Token %5$.*4$s...
J9RI005=jvmri->GetComponentDataArea component %s does not have dataArea under this vm.
SHRC143=Storing class %2$.*1$s in shared cache for cldr id %3$d with URL %5$.*4$s...
J9RI004=jvmri->DynamicVerbosegc not supported.
SHRC142=\tat 0x%1$p\t\t%2$x \!\= %3$x
J9RI003=Can't allocate dump agent in jvmri->DumpRegister, func not registered.
SHRC141=mismatched bytes\:
J9RI002=jvmri->DumpRegister called with null callback, func not registered.
EXEL009=\nArguments to the following options are expressed in bytes.
SHRC140=size\:\t%1$d\t\t\t%2$d\n
J9RI001=Internal error removing dump agent in jvmri->DumpDeregister, func may not be deregistered.
EXEL008=\  -Xfuture        enable strictest checks, anticipating future default
J9RI000=jvmri->CreateThread cannot allocate thread args memory
EXEL007=\  -Xnoaot         do not run precompiled code
EXEL006=\  -Xnojit         disable the JIT
EXEL005=\  -Xint           run interpreted only (equivalent to -Xnojit -Xnoaot)
EXEL004=\n  -Xrun<library>[\:options]  load native agent library\n                            (deprecated in favor of -agentlib)\n
EXEL003=\  -Xbootclasspath/a\:<path>  append <path> to bootstrap classpath
EXEL002=\  -Xbootclasspath/p\:<path>  prepend <path> to bootstrap classpath
EXEL001=\  -Xbootclasspath\:<path>    set bootstrap classpath to <path>
EXEL000=The following options are non-standard and subject to change without notice.\n
JDBG021=unrecognized debug option
JDBG020=unrecognized debug option\: '%s'
SHRC139=\n\tROMClass being stored\tROMClass in cache
SHRC138=ERROR\: Found more than one orphan ROMClass for %.*s
SHRC137=SAFE MODE\: Warning\: ROMClass %.*s does not match ROMClass in cache
SHRC136=ERROR\: Cannot create monitor in SH_ROMClassManagerImpl
SHRC135=ERROR\: Failed to create hashtable in SH_ROMClassManagerImpl
SHRC134=ERROR\: Failed to create pool in SH_ROMClassManagerImpl
SHRC133=ERROR\: Cannot enter ROMClassManager hashtable mutex
SHRC132=ERROR\: Cannot allocate memory for hashtable entry in ROMClassManagerImpl
SHRC131=ERROR\: Cannot allocate memory for linked list item in ROMClassManagerImpl
SHRC130=ERROR\: Attempt to allocate while commit is still pending
JDBG019=unsorted relocation list %zx
JDBG018=ignoring unrecognized debug option
JDBG017=ignoring unrecognized debug option\: '%s'
JDBG016=jvm attach failed
JDBG015=Debug response server
JDBG014=cannot allocate vm->debuggerClassReferences pool
JDBG013=cannot allocate vm->debuggerReferences pool
JDBG012=j9dbg_init_server failed
JDBG011=cannot allocate debugServer
JDBG010=Example\: java -Xrunjdwp\:transport\=dt_socket,address\=localhost\:8000\n
SHRC129=ERROR\: Attempt to set readerCount to -1\!
SHRC128=SH_CompositeCache\:\:exitMutex failed with return code %d
SHRC127=SH_CompositeCache\:\:enterMutex failed with return code %d
SHRC126=ERROR\: Request made to add too many items to ClasspathItem
SHRC125=ERROR\: Could not allocate memory for string buffer in SH_CacheMap
SHRC124=Cache is %1$d%% full\n
SHRC123=%% Stale classes    \= %1$d%%\n
SHRC122=\# Stale classes    \= %d
SHRC121=\# Tokens           \= %d
SHRC120=\# URLs             \= %d
JDBG009=j9methodids\=y|n                 use j9 method ids               n\n
JDBG008=onuncaught\=y|n                  debug on any uncaught?          n
JDBG007=onthrow\=<exception name>        debug on throw                  none
JDBG006=server\=y|n                      listen for debugger?            n
JDBG005=address\=<listen/attach address> transport spec                  "localhost\:8888"
JDBG004=transport\=<name>                transport spec                  none
JDBG003=suspend\=y|n                     wait on startup?                y
JDBG002=---------------------           -----------                     -------
JDBG001=Option Name and Value           Description                     Default
JDBG000=-Xrunjdwp usage\: -Xrunjdwp\:[help]|[<option>\=<value>, ...]\n
SHRC119=\# Classpaths       \= %d
SHRC118=\# ROMClasses       \= %d
SHRC117=Metadata %% used    \= %1$d%%\n
SHRC116=Metadata bytes     \= %d
SHRC115=ROMClass bytes     \= %d
SHRC114=free bytes         \= %d
SHRC113=cache size         \= %d
SHRC112=allocation pointer \= 0x%p\n
SHRC111=end address        \= 0x%p
SHRC110=\nbase address       \= 0x%p
EXEX026=\  -jxe <jxeFile>   places jxeFile on the classpath and executes the startup\n                    class found in jxeFile.
EXEX025=Usage\:\t%s [-jxe] [options] <jxeFile> [args...]
EXEX024=JXE %s did not contain a startup class.
EXEX023=Could not initialize JXE utilities.
EXEX022=Unable to load rom image from jxe.
EXEX021=Error loading jxe relocator\: %1$s (%2$s)
EXEX020=Missing required export
SHRC109=\!STALE\!
SHRC108=\t%.*s
SHRC107=\t%.*s
SHRC106=%1$d\: 0x%2$p TOKEN
SHRC105=%1$d\: 0x%2$p URL
SHRC104=%1$d\: 0x%2$p CLASSPATH
SHRC103=\tToken 0x%p
SHRC102=\tURL 0x%p
SHRC101=\tIndex %1$d in classpath 0x%2$p
SHRC100=%1$d\: 0x%2$p ROMCLASS\: %4$.*3$s at 0x%5$p.
CDRT002=Failing PC\: %p (offset %p), metaData \= %p
CDRT001=Method\: %.*s.%.*s%.*s (%p)
CDRT000=Unable to locate JIT stack map - aborting VM
EXEX019=Logical mapped addr\=0x%1$X for physical address at 0x%2$X and size 0x%3$X
EXEX018=jxeaddr location 0x%1$08X outside of range 0x%2$08X to 0x%3$08X
EXEX017=Error mapping jxe in flash
EXEX016=Invalid jxespace parameters.
EXEX015=VM startup error\: Out of memory
EXEX014=Run %s -help for usage
EXEX013=Internal VM error\: Failed to create Java VM
EXEX012=-jar option is not available for this class library
EXEX010=%s requires a parameter
PORT019=Unable to create directory %s.  Shared classes will be disabled until this directory is created.
PORT018=Operation Failed\: %1$d (%2$s failed\: %3$d)
PORT017=Operation Failed\: %d
PORT016=Internal Error %i
PORT015=Unable to resolve DLL references - a prerequisite DLL may be missing
PORT014=DLL not found
PORT013=DLL table not found
VERB015=shared class cache size
PORT012=Error\: 68K function has PACE bit set.
VERB014=memory maximum
PORT011=Out of memory
VERB013=ROM class segment increment
PORT010=Permission denied
VERB012=RAM class segment increment
VERB011=java thread stack size
VERB010=java thread stack maximum size
EXEX009=\  -verify          enable class file verification.\n  -X               print help on non-standard options.
EXEX008=\  -verbose[\:class,gc,stack,sizes]\n                   enable verbose output (default\=class).\n
EXEX007=\  -jcl\:<config>[\:options]\n                   specify which JCL DLL to use (e.g. cdc, cldc, ...).\n
EXEX006=\  -debug\:<options> enable debug, JDWP standard <options>.\n
EXEX005=\  -D<prop>\=<val>   set the value of a system property.\n
EXEX004=\  -jxespace\:<physicalAddr>,<size>,<logicalAddr>\n                   map memory region for jxes, (values are in hex).\n  -jxeaddr\:<logicalAddr>\n                   run a jxe directly from memory, (address is in hex).
EXEX003=\  -jxe\:<jxeFile>   run the named jxe file.
EXEX002=\n[options]\n  -classpath <path>\n  -cp <path>       set classpath to <path>.
EXEX001=Usage\:\t%s [options] -jxe\:<jxeFile> [args...]
EXEX000=Usage\:\t%s [options] classname [args...]
PORT009=File not found
PORT008=Module architecture incorrect
PORT007=Not a module
VERB009=java thread stack increment
PORT006=Module format incorrect
VERB008=java thread stack initial size
PORT005=Could not load module
VERB007=OS thread stack size
PORT004=Symbol resolution failure
VERB006=Failed to initialize
PORT003=Dependent module %s could not be loaded
VERB005=Error\: -Xverbosegclog missing filename
PORT002=Unkown error loading shared library
VERB004=Error\: -Xverbosegclog number of cycles must be greater than 0
PORT001=Failed to allocate memory.
VERB003=Error\: -Xverbosegclog number of files must be greater than 0
VERB002=Verbose stack\: maximum stack use was %1$zd/%2$zd bytes on Java/C stacks
VERB001=(unnamed thread)
VERB000=Verbose stack\: "%2$.*1$s" used %3$zd/%4$zd bytes on Java/C stacks
J2JX099=Incomplete option(s) on command line. First was\: %s
J2JX098=Invalid argument [%1$s] for option\: %2$s
J2JX097=Unrecognized option(s) on command line. First was\: %s
J2JX096=Failed to find function j9bcv_verifyCreateStackAttributes
J2JX095=Failed to find function j9bcv_verifyClassStructure
J2JX094=Failed to open verifier DLL %1$s\: %2$s
J2JX093=No class files specified on the command line
DUMP020=%s Dump has been written
J2JX092=Internal error with newly created VM
J2JX091=Successfully created the Java VM
J2JX090=Attempting to create a Java VM for use with AOT
DUMP019=JVM Requesting %s Dump
DUMP018=Requested event is not available\: run with -Xdump\:dynamic flag
DUMP017=Aborting\: Cannot compress file (%s)
J2JX089=Internal Error\: could not find %1$s in %2$s
DUMP016=Aborting\: Cannot create file (%s)
J2JX088=Internal Error\: failed to open %1$s\: %2$s
DUMP015=Aborting\: Cannot open or read (%s)
J2JX087=Internal Error\: could not determine executable name
DUMP014=VM Action unrecognised\: ...%s
J2JX086=Wrote %1$i bytes to symbol file %2$s
DUMP013=Processed Dump Event "%1$s", detail "%3$.*2$s".
J2JX085=Internal Error\: unsupported error code from create rom class %d
DUMP012=Error in %1$s Dump\: %2$s
J2JX084=Closing segment %d and starting a new segment
DUMP011=%1$s Dump spawned process %2$d
J2JX083=Including %s in AOT
DUMP010=%1$s Dump written to %2$s
J2JX082=Excluding %s from AOT
J2JX081=Error\: %s
J2JX080=Verification error in method %1$i (%3$.*2$s%5$.*4$s) at PC %6$i
DUMP009=%s Dump not available
DUMP008=using '%s'
DUMP007=JVM Requesting %1$s Dump using '%2$s'
J2JX079=Error\: %1$s at %2$i
DUMP006=Processing Dump Event "%1$s", detail "%3$.*2$s" - Please Wait.
J2JX078=Recommended action\:
DUMP005=Missing Executable
J2JX077=Invalid class file
DUMP004=Missing Filename
J2JX076=Invalid class file\: %s
DUMP003=Named Dump unrecognised\: %s
J2JX075=Entry name too long\: %s
DUMP002=Label Field unrecognised\: %%%1$c
J2JX074=Attempted to add duplicate entry to JXE\: %s
DUMP001=Dump Event unrecognised\: ...%s
J2JX073=dir processing file\: %s
DUMP000=Dump Option unrecognised\: -Xdump\:%s
J2JX072=Could not open directory %s
J2JX071=Processing directory\: %s
J2JX070=increasing space to\: %i bytes
J2JX069=estimated memory size\: %i bytes
J2JX068=file size\: %i bytes
J2JX067=No valid class found in %s
J2JX066=Could not open file\: %s
J2JX065=Error closing zip file\: %s
J2JX064=The valid values for the -precompileTarget option are\:
J2JX063=Defaults are\:
J2JX062=classfile(s)                any number of files ending with .class, .jar, or .zip will\n                            be examined and added to the jxe\n
J2JX061=Ahead-of-time compilation options\:\n  -[no]precompile           [do not] mark all methods for precompilation\n  -[no]precompileMethod xxx [do not] mark named methods for precompilation\n  -[no]compileAheadOfTime   compile marked method ahead of time\n  -precompileTarget xxx     generate jxe for target architecture and OS xxx\n  -precompileOptions xxx    pass xxx to the precompilation engine\n  -[no]precompileResolve    [do not] attempt to resolve external references during precompilation\n  -[no]stripBytecode        [do not] strip bytecode for aot compiled methods\n
J2JX060=\  -j2se                     use this option when using jar2jxe in a J2SE environment\n
J2JX059=\  -[no]tools                the tools directory is [not] added to the list of extension directories
J2JX058=\  -padJxe                   pad the jxe at end with xxx extra bytes
J2JX057=\  -[no]segmented            [do not] generate multiple segmented jxes\n  -maxSegmentSize xxx       max size for any segmented jxe (hex number)\n  -maxSegmentSize seg\=xxx   max size for specific segmented jxe (hex number)\n  -locate xxx               locate the image to address xxx (hex number)\n  -locate seg\=xxx           locate the image of a segment to hex address xxx
J2JX056=\  -fileExtension xxx        treat files ending with .xxx as .jar files
J2JX055=\  -vmOption xxx             use a vmOption xxx when running jxe
J2JX054=\  -versionName xxx          set version name of jxe to xxx
J2JX053=\  -description xxx          set description of jxe to xxx
J2JX052=\  -uuid xxx                 set the UUID of the jxe to xxx
J2JX051=\  -D xxx\=yyy                set system property xxx to yyy
J2JX050=\  -startupClass xxx         set startup class to xxx\n  -noStartupClass           indicate the jxe doesn't have a startup class
J2JX049=\  -srcDir xxx               include all files in directory tree xxx
J2JX048=\  -outputFormat xxx         set the output format to xxx (c, bin, or jar)
J2JX047=\  -o xxx                    set base output filename to xxx
J2JX046=\  -be                       generate big endian output\n  -le                       generate little endian output
J2JX045=\  -version                  print out the version of this program
J2JX044=\  -[no]profile              [do not] generate a .prf file for profiling
J2JX042=\  -[no]verify               [do not] verify the class file format
J2JX041=\  -q                        quiet mode\n  -[no]logo                 [do not] print copyright message\n  -verbose                  verbose mode
J2JX040=Usage\:\t%s [options] classfile(s)\n\n[options]\n  -help, -?                 print usage
J2JX039=IBM is a registered trademark of IBM Corp.\nJava and all Java-based marks and logos are trademarks or registered\ntrademarks of Sun Microsystems, Inc.
J2JX038=Licensed Materials - Property of IBM
J2JX037=Could not compile method\: %2$.*1$s/%4$.*3$s%6$.*5$s
J2JX036=Target\: %s\n
J2JX035=(c) Copyright IBM Corp. 1991, 2005  All Rights Reserved
J2JX034=J9 Java(TM) JAR to JXE, Version %s
J2JX033=Internal Error\: failed the properly build the Error'd rom class
J2JX032=Unbalanced quotes in parameter list
J2JX031=finished processing JAR file\: %s
J2JX030=Error reading %1$s from %2$s
J2JX029=processing\: %s
J2JX028=Error reading entry from %s
J2JX027=Could not open or read %s
J2JX026=segment %d could not fit within the required maximum segment size
J2JX025=Attempted to add duplicate class to JXE %s
J2JX024=added class file\: %s
J2JX023=attempting to add class file\: %s
J2JX022=%s is invalid
J2JX021=Could not load %1$s\: %2$s
J2JX020=growing ncpRef [%1$x] from %2$u entries to %3$u entries
J2SE000=\n
J2JX019=growing buffer [%1$x] from %2$u to %3$u
J2JX018=Successfully created %s
J2JX017=Failed to write data to file\: %s
J2JX016=Failed to create/clear file\: %s
J2JX015=Unknown error code\: %d
J2JX014=AOT initialization failed
J2JX013=Internal Error\: Endian flip failed
J2JX012=Supplied UUID is invalid
J9CL014=%1$s\: unrecognized option --> '%2$s'
J2JX011=Internal Error\: ZIP Entry not closed
J9CL013=Failed to allocate OS monitor
J2JX010=Internal Error\: read failed
J9CL011=Failed to fork OS thread
J9CL010=Failed to allocate JNIEnv
J2JX009=Internal Error\: seek failed
J2JX008=Internal Error\: no entries
J2JX007=Internal Error\: Duplicate entry
J9CL009=Thread already started
J2JX006=Out of memory
J9CL008=nanosecond timeout value out of range
J2JX005=Internal Error\: size mismatch
J9CL007=timeout value is negative
J9GC056=available large page sizes\:
J9CL006=No pre-verify data for java/lang/Object
J2JX004=Internal Error\: CRC MISMATCH
J9GC055=large page size
J9CL005=Incompatible class library version\: requires VM v%1$i, found v%2$i
J2JX003=Internal Error\: bad function argument
J9GC054=Large Page size %1$zu%2$s is not a supported page size, using %3$zu%4$s instead.
J9CL004=Incompatible class library version\: expected JCL v%1$i, found v%2$i
J2JX002=Precompiled %1$d of %2$d method(s) for target %3$s.
J9GC053=memory maximum
J9CL003=Incompatible class library version\: JCL %1$x, VM %2$x
J2JX001=Stored resource\: %s
J9GC052=ROM class segment increment
J9CL002=Classes are from a non-J9 library, or an incorrectly reduced JXE
J2JX000=Attempted to add duplicate resource file [%s], file ignored.
J9GC051=RAM class segment increment
J9CL001=Try running with -jcl\:%s
J9GC050=soft memory maximum
J9CL000=Incompatible class library
J9GC049=remembered set size
J9GC048=old space increment
J9GC047=maximum old space size
J9GC046=initial old space size
J9GC045=initial memory size
J9GC044=maximum new space size
J9GC043=initial new space size
J9GC042=Sum of %1$s and %2$s too small for %3$s
J9GC041=Unknown fvtest type\: %s
J9GC040=Unknown option\: %s
J9GC039=*** %1$s deprecated\: use %2$s instead ***
J9GC038=%s value specified is too large
J9GC037=%1$s not supported with values other than %2$zu
J9GC036=%1$s value must be above %2$zu
J9GC035=%s must be followed by a number
J9GC034=%1$s value must be between %2$zu and %3$zu (inclusive)
J9GC033=%1$s value must be between %2$f and %3$f (inclusive)
J9GC032=System configuration does not support option '%s'
J9GC031=Option error\: '%1$s' and '%2$s' cannot both be specified
J9GC030=%1$s value of %2$f must be at least %3$s less than %4$s value of %5$f
J9GC029=Option error\: '%s'
J9GC028=Option too large\: '%s'
J9GC027=Malformed option\: '%s'
J9GC026=-Xverbosegclog failed to allocate internal structures
J9GC025=Sum of %1$s and %2$s
J9GC024=Sum of %1$s and %2$s too large for heap
J9GC023=Sum of %1$s and %2$s must equal %3$s
JNCK091=Advice detected in handler frame of a JVMPI or JVMTI event\n
J9GC022=Sum of %1$s and %2$s too large for %3$s
JNCK090=Warning detected in handler frame of a JVMPI or JVMTI event\n
J9GC021=%1$s must equal %2$s
J9GC020=%s too large for heap
JITM000=Unsupported Hardware [%d].
JNCK089=Error detected in the handler frame of a JVMPI or JVMTI event\n
JNCK088=JNI warning in %1$s\: Argument \#%2$d is a weak reference. A weak reference may become NULL at any time. The reference should be promoted using NewLocalRef or NewGlobalRef and then compared to NULL before calling %3$s
J9GC019=%1$s too large for %2$s
JNCK087=JNI error in %1$s\: Argument \#%2$d is not a java/lang/reflect/Method or java/lang/reflect/Constructor
J9GC018=%1$s too small for %2$s
JNCK086=JNI warning in %1$s\: Argument \#%2$d is not a java/nio/Buffer. %3$s will return an error code
J9GC017=%1$s too small, must be at least %2$zu %3$sbytes
JNCK085=Advice detected in JNI_OnLoad of library %.*s\n
J9GC016=Failed to allocate survivor segment in default memory space
JNCK084=Warning detected in JNI_OnLoad of library %.*s\n
J9GC015=Failed to allocate default memory space
JNCK083=Error detected in JNI_OnLoad of library %.*s\n
J9GC014=Failed to allocate VM class memory segments
JNCK082=Advice detected in the outermost frame of an attached thread\n
J9GC013=Failed to allocate VM object memory segments
JNCK081=Warning detected in the outermost frame of an attached thread\n
J9GC012=Failed to allocate VM memory segments
JNCK080=Error detected in the outermost frame of an attached thread\n
J9GC011=Failed to initialize pool of memoryspaces
J9GC010=Failed to initialize finalizer management
JNCK079=Advice detected in %2$.*1$s.%4$.*3$s%6$.*5$s\n
JNCK078=Warning detected in %2$.*1$s.%4$.*3$s%6$.*5$s\n
J9GC009=Failed to initialize mutex for GC statistics
JNCK077=Error detected in %2$.*1$s.%4$.*3$s%6$.*5$s\n
J9GC008=Failed to initialize module extensions
JNCK076=Internal jnichk error in %s\: Out of memory
J9GC007=Failed to initialize, parsing command line
JNCK075=Internal jnichk error in %1$s\: Unrecognized descriptor 0x%2$x
J9GC006=Failed to initialize, out of memory
JNCK074=JNI advice in %s\: Buffer appears to be unmodified. Consider using JNI_ABORT instead of mode 0.
J9GC005=Failed to initialize
JNCK073=JNI advice in %1$s\: JNI_ABORT was specified, but cannot be honoured because data has been modified.\n(Original CRC\=0x%2$x, new CRC\=0x%3$x).\nSince %4$s returned the actual array contents, the changes will not be discarded. This may not be what you wanted.
J9GC004=Failed to instantiate global garbage collector
JNCK072=JNI advice in %1$s\: JNI_COMMIT was specified, but will be ignored.\nSince %2$s returned the actual array contents, the buffer will be invalid following this call. This may not be what you wanted.
J9GC003=Failed to instantiate task dispatcher
JNCK071=JNI warning\: Memory at 0x%1$p acquired by %2$s was not released before returning from native. This is probably a memory leak.
J9GC002=Failed to instantiate heap.  %1$zu%2$s requested
JNCK070=JNI warning in %1$s\: Original array data was modified between %2$s and %3$s.\n(Original CRC\=0x%4$x, new CRC\=0x%5$x).\nSince %6$s returned a copy of the array contents, the new contents will be lost.
J9GC001=Failed to instantiate heap
J9GC000=Internal Error, Out of Memory
SHRC099=%1$d\: 0x%2$p ORPHAN\: %4$.*3$s at 0x%5$p.
SHRC098=\nCurrent statistics for cache "%1$s"\: \n
SHRC097=ERROR\: Shared Cache "%s" is corrupt. No new JVMs will be allowed to connect to the cache.\n \tExisting JVMs can continue to function, but cannot update the cache.
SHRC096=WARNING\: Shared Cache "%s" is full. Use -Xscmx to set cache size.
SHRC095=ERROR\: Attempts to call markStale on shared cache items have failed
SHRC094=ERROR\: Orphan found but local ROMClass passed to addROMClassToCache
SHRC093=INFO\: Detected unexpected termination of another JVM during update
SHRC092=ERROR\: ADD failure when reading cache
SHRC091=ERROR\: Read corrupt data for item 0x%p (invalid dataType)
SHRC090=ERROR\: Failed to get cache mutex in SH_CacheMap startup
JNCK069=JNI warning in %1$s\: End is out of range (%2$d + %3$d > %4$d)
JNCK068=JNI warning in %1$s\: Start or index is out of range (%2$d >\= %3$d)
JNCK067=JNI warning in %1$s\: Negative region length (%2$d) specified
JNCK066=JNI warning in %1$s\: Negative start or index (%2$d) specified
JNCK065=JNI warning in %1$s\: Automatically grew local ref frame capacity from %2$d to %3$d. %4$d refs are in use.\nUse EnsureLocalCapacity or PushLocalFrame to explicitly grow the frame.
JNCK064=JNI warning in %1$s\: Automatically grew global weak ref pool capacity from %2$d to %3$d.\nThis may be an indicator of a memory leak.
JNCK063=JNI warning in %1$s\: Automatically grew global ref pool capacity from %2$d to %3$d.\nThis may be an indicator of a memory leak.
JNCK062=JNI warning in %s\: This function should not be called inside of a critical section
JNCK061=JNI warning in %1$s\: Argument \#%2$d is a malformed field signature ("%3$s")
JNCK060=JNI warning in %1$s\: Argument \#%2$d is a malformed method signature ("%3$s")
SHRC089=ERROR\: Cannot create refresh mutex in SH_CacheMap
SHRC088=ERROR\: Failed to create cache as ROMImageSegment in SH_CacheMap
SHRC087=ERROR\: MarkStale failed during ClasspathManager\:\:update()
SHRC086=ERROR\: Cannot enter ClasspathManager hashtable mutex
SHRC085=ERROR\: Cannot allocate memory for linked list item header
SHRC084=ERROR\: Cannot allocate memory for linked list item
SHRC083=ERROR\: Cannot allocate memory for identifiedClasspaths array in SH_ClasspathManagerImpl2
SHRC082=ERROR\: Cannot create identifiedMutex in SH_ClasspathManagerImpl2
SHRC081=ERROR\: Cannot create cpeTableMutex in SH_ClasspathManagerImpl2
SHRC080=ERROR\: Cannot allocate memory for hashtable entry
JNCK059=JNI warning in %1$s\: Argument \#%2$d is a malformed identifier ("%3$s")
JNCK058=JNI warning in %1$s\: After calling %2$s, you must check for exceptions using ExceptionCheck, ExceptionClear or ExceptionOccurred before calling %3$s
JNCK057=JNI error in %1$s\: Do not use %2$s to release memory 0x%3$p acquired using %4$s
JNCK056=JNI error in %1$s\: Got memory 0x%2$p from object 0x%3$p, releasing from 0x%4$p
JNCK055=JNI error in %1$s\: Pointer 0x%2$p was not returned by any JNI function, or was already released
JNCK054=JNI error in %1$s\: Unrecognized mode option %2$d
JNCK053=JNI error\: Critical section must be released before function returns
JNCK052=JNI error in %1$s\: Class %3$.*2$s is obsolete
JNCK051=Internal VM error in %1$s\: Pushed bytes %2$p is smaller than JNI ref bytes %3$p
JNCK050=JNI error in %s\: PopLocalFrame called without a local frame on the stack
SHRC079=ERROR\: Cannot create hashtable in SH_ClasspathManagerImpl2
SHRC078=ERROR\: Failed to create linkedListHdr pool in SH_ClasspathManagerImpl2
SHRC077=ERROR\: Failed to create linkedListImpl pool in SH_ClasspathManagerImpl2
SHRC076=Finding class %1$s in shared cache for cldr id %2$d...
SHRC075=\ Failed.
SHRC074=\ Succeeded.
SHRC073=Storing class %2$.*1$s in shared cache for cldr id %3$d with URL %5$.*4$s (index %6$d)...
SHRC072=ERROR\: Command-line option "%s" unrecognised
SHRC071=ERROR\: Command-line option "%s" requires sub-option
SHRC070=INFO\: Incremental updates disabled
JNCK049=JNI error in %s\: va_list reuse detected
JNCK048=JNI error in %s\: Ineligible receiver
JNCK047=JNI error in %s\: Incorrect clazz argument
JNCK046=JNI error in %1$s\: Method has wrong return type ('%2$c')
JNCK045=JNI error in %s\: Method is not static
JNCK044=JNI error in %s\: Method is static
JNCK043=JNI error in %1$s\: Argument \#%2$d; unable to find %3$s
JNCK042=JNI error in %1$s\: Argument \#%2$d is not a subclass of %3$s
JNCK041=JNI error in %1$s\: Argument \#%2$d is out of range for a %3$s (0x%4$x > 0x%5$x)
JNCK040=JNI error in %1$s\: Argument \#%2$d is out of range for a %3$s (0x%4$x < 0x%5$x)
SHRC069=INFO\: Concurrent store contention reduction disabled
SHRC068=INFO\: Local cacheing of classpaths disabled
SHRC067=INFO\: Timestamp checking disabled
SHRC066=INFO\: Locking of local hashtables disabled
SHRC065=ERROR\: Cannot allocate pool in shrinit
SHRC064=ERROR\: Failed to create configMonitor in shrinit
SHRC063=ERROR\: Cannot allocate memory for sharedClassConfig in shrinit
SHRC062=ERROR\: Error copying username into default cache name
SHRC061=Cache name should not be longer than 64 chars. Cache not created.
SHRC060=ERROR\: Cannot allocate memory for string buffer in shrinit\:\:hookFindSharedClass
JNCK039=JNI error in %1$s\: Argument \#%2$d is NULL
JNCK038=JNI error in %1$s\: Argument \#%2$d (0x%3$p) is not a valid object reference. It's type is\: %4$s\n
JNCK037=JNI error in %1$s\: Argument \#%2$d (0x%3$p) is not a local reference. Its type is\: %4$s
JNCK036=JNI error in %1$s\: Argument \#%2$d (0x%3$p) is not a weak global reference. Its type is\: %4$s
JNCK035=JNI error in %1$s\: Argument \#%2$d (0x%3$p) is not a global reference. Its type is\: %4$s
JNCK034=JNI error in %1$s\: Argument \#%2$d is not a %3$s
JNCK033=JNI error in %1$s\: Argument \#%2$d is not a jarray
JNCK032=JNI error in %1$s\: Argument \#%2$d is not a jobjectArray
JNCK031=JNI error in %1$s\: Argument \#%2$d is NULL
JNCK030=JNI error in %s\: This function cannot be called while GC is disabled (it was probably called from a JVMPI or JVMTI event)
JDTS000=Listening for transport dt_socket at address\: %d
SHRC059=ERROR\: Cannot allocate memory for ClasspathItem in shrinit\:\:hookFindSharedClass
SHRC058=ERROR\: Cannot allocate memory for ClasspathItem in shrinit\:\:hookStoreSharedClass
SHRC057=Wrong parameters for expire option
SHRC056=Command-line option "%s" unrecognised
SHRC055=Disable incremental cache updates
SHRC054=Disable algorithm to reduce store contention
IREL001=Fatal error\: JXE %s.jar generated by a real time JVM cannot be run by a non real time JVM
SHRC053=Disable local hashtable locking
IREL000=AOT code from %s.jar generated with %s VM doesn't run with %s VM.
SHRC052=Disable local classpath cacheing
SHRC051=Switch off dynamic updates
SHRC050=Enable verbose output
JNCK029=JNI error in %s\: This function cannot be called inside of a critical section
JNCK028=JNI error in %s\: This function cannot be called when an exception is pending
JNCK027=JNI error in %s\: env is not the JNIEnv* for the active thread
JNCK026=JNI error in %s\: env does not appear to be a valid thread, or memory has been corrupted, or this is not a J9 virtual machine
JNCK025=Use -Xcheck\:jni\:nonfatal to continue running when errors are detected.
JNCK024=JNI error detected. Aborting.
JNCK023=JNI error detected. Continuing...
JNCK022=freed local reference(?)
JNCK021=local reference in another thread
JNCK020=debugger reference
SHRC049=Debug mode that checks all incoming bytecode
SHRC048=List all elements in cache
SHRC047=Print summary of cache statistics
SHRC046=Display all shared caches and their statistics
SHRC045=Destroy caches that have been unused for <t> mins
SHRC044=OPTION_MODIFIED_EQUALS"<modContext>"
SHRC043=Enable sharing of modifed bytecode\n \t<modContext> is user-descriptor describing type of modification\n \tJVMs using same <modContext> must use same modifications
SHRC042=Destroy all shared caches
SHRC041=Destroy shared cache (use name parm or default)
SHRC040=Specify name of shared cache
JNCK019=weak global reference
JNCK018=global reference
JNCK017=local reference
JNCK016=NULL
JNCK015=\thelp           print this screen
JNCK014=\tpedantic       perform more thorough, but slower checks
JNCK013=\tnovalist       don't check for va_list reuse
JNCK012=\tnoadvice       don't display advice
JNCK011=\tnowarn         don't display warnings
JNCK010=\tnonfatal       don't exit when errors are detected
SHRC039=Print general shared help
SHRC038=Usage\:\n\njava -Xshareclasses[\:option,...]\n\n Valid options included (with a brief summary) are\:\n\n
SHRC037=Incremental updates disabled
SHRC036=Concurrent store contention reduction disabled
SHRC035=Local cacheing of classpaths disabled
SHRC034=Timestamp checking disabled
SHRC033=Locking of local hashtables disabled
SHRC032=The Shared Class Cache you are attaching has wrong modification level.
SHRC031=The Shared Class Cache you are attaching has incompatible JVM version.
SHRC030=The Shared Class Cache you are attaching has invalid header.
JNCK009=\tnobounds       don't perform bounds checking on strings and arrays
JNCK008=\ttrace          trace all JNI functions
JNCK007=\tverbose        trace certain JNI functions and activities
JNCK006=\tall            check application and system classes
JNCK005=Usage\: -Xcheck\:jni\:[option[,option[,...]]]
JNCK004=jnichk - JNI Check utility for J9, Version %s
JNCK003=JNI check utility\: unable to allocate VM local storage
JNCK002=JNI check utility\: unable to hook event
JNCK001=JNI check utility installed. Use -Xcheck\:jni\:help for usage
JNCK000=-Xcheck\:jni\: unrecognized option --> '%s'
#
# @(#)src/tools/sov/java.properties, tool, as142, 20070618 1.19.2.1
# ===========================================================================
# Licensed Materials - Property of IBM
# "Restricted Materials of IBM"
#
# IBM SDK, Java(tm) 2 Technology Edition, v1.4.2
# (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved
#
# ===========================================================================
#

#
# Java launcher messages
full.version=%2 full version "%1"

Could.not.create.JVM=Could not create the Java virtual machine.

Thread.detach.error=Could not detach main thread.

Option.requires.classpath=%1 requires class path specification.

No.longer.supported=Warning: %1 option is no longer supported.

Blank.-J.option=Error: the -J option should not be followed by a space.

No.application.home.found=Cannot determine application home

Error.loading=Error loading: %1

JNI.interfaces.not.found=The JNI interfaces cannot be found in: %1

No.public.JRE=A public JRE for release %1 is not found.

JVM.not.found=The Java Virtual Machine is not found: %1

Path.too.long=The path is too long: %1

java.error.opening.jar.file=A java error occurred while attempting to open the jar file: %1

jar.file.not.found=The jar file is not found: %1

class.not.found=The java class is not found: %1

class.cannot.be.loaded=The java class could not be loaded. %1

No.main.method.in.class=There is no main method in class: %1

No.manifest.in.jar.file=The jar file does not contain a manifest: %1

No.main.class.in.manifest=The jar file is missing the manifest entry for the main class: %1

main.not.public.in.class=The main method of class is not public: %1

Option.value.invalid=The JVM option value is invalid: %1

Invalid.IBM_JAVA_OPTIONS=Invalid option in IBM_JAVA_OPTIONS: %1

Invalid.service.option=Invalid option in -XService: %1

JVMCI025=Unable to open options file: %1

JVMCI030=Invalid option in options file: %1

Unrecognized.option=The JVM option is invalid: %1

Invalid.number.of.threads=Invalid number of threads: %1

#
# Main syntax help
#
usage=\n\
Usage: %1 [-options] class [args...]\n\
\           (to execute a class)\n\
\   or  %1 [-jar] [-options] jarfile [args...]\n\
\           (to execute a jar file)\n\n\
where options include:\n\
\    -cp -classpath <directories and zip/jar files separated by %2>\n\
\              set search path for application classes and resources\n\
\    -D<name>=<value>\n\
\              set a system property\n\
\    -verbose[:class|gc|jni]\n\
\              enable verbose output\n\
\    -version  print product version\n\
\    -showversion  print product version and continue\n\
\    -? -help  print this help message\n\
\    -X        print help on non-standard options\n\
\    -assert   print help on assert options\n

#
# Additional syntax help for the assert related options
#
assert.usage=\n\
These assert options can be specified on the %1 command:\n\
\    -ea[:<packagename>...|:<classname>]\n\
\    -enableassertions[:<packagename>...|:<classname>]\n\
\              enable assertions\n\
\    -da[:<packagename>...|:<classname>]\n\
\    -disableassertions[:<packagename>...|:<classname>]\n\
\              disable assertions\n\
\    -esa | -enablesystemassertions\n\
\              enable system assertions\n\
\    -dsa | -disablesystemassertions\n\
\              disable system assertions

#
# Additional syntax help for nonstandard JVM options
# ibm@73588 added -Xpd
#
classic.xusage= \
\    -Xargencoding     Allow Unicode escape sequences in args\n\
\    -Xbootclasspath:<directories and zip/jar files separated by %2>\n\
\                      Set search path for bootstrap classes and resources\n\
\    -Xbootclasspath/a:<directories and zip/jar files separated by %2>\n\
\                      Append to end of bootstrap class path\n\
\    -Xbootclasspath/p:<directories and zip/jar files separated by %2>\n\
\                      Prepend in front of bootstrap class path\n\
\    -Xcheck:jni       Perform additional checks for JNI functions\n\
\    -Xcheck:nabounds  Perform additional checks for JNI array operations\n\
\    -Xcomp            Compile all methods on first use (z/OS only)\n\
\    -Xdisableexplicitgc Disable explicit GCs\n\
\    -Xdisablejavadump Use system dump rather than java dump on error\n\
\    -Xlp              Try to allocate Java heap using large pages\n\
\    -Xgcpolicy[:optthruput]|[:optavgpause]\n\
\                      Control garbage collector behavior\n\
\    -Xms<size>        Set initial Java heap size\n\
\    -Xmx<size>        Set maximum Java heap size\n\
\    -Xnoclassgc       Disable class garbage collection\n\
\    -Xcompactexplicitgc   Run full compaction in every forced GC (System.gc)\n\
\    -Xnocompactexplicitgc Don't run compaction in any forced GC\n\
\    -Xnosigcatch      Disable JVM recovery code\n\
\    -Xnosigchain      Disable chaining of signal handlers\n\
\    -Xoptionsfile=<file> File containing JVM options and defines\n\
\    -Xoss<size>       Set maximum Java stack size for any thread\n\
\    -Xpd              Load the Problem Determination JRE libraries\n\
\    -Xquickstart      Improve startup time by delaying compilation\n\
\    -Xrs              Reduce the use of OS signals\n\
\    -Xrunhprof[:help]|[:<option>=<value>, ...]\n\
\                      Perform heap, cpu, or monitor profiling\n\
\    -Xrunjdwp[:help]|[:<option>=<value>, ...]\n\
\                      Load debugging libraries for remote debug\n\
\    -Xss<size>        Set maximum native stack size for any thread\n\
\    -Xverify          Enable strict class checking of all class loads\n\
\    -Xverify:none     Disable strict class checking\n\
\    -Xverify:remote   Enable strict class checking of remote class loads\n\
\    -Xdebug           Enable remote debugging\n\
The -X options are non-standard and subject to change without notice.\n

#
# Additional syntax help for nonstandard JVM options(debug only)
#
classic.debug.xusage= \
\    -Xt               Bytecode tracing (debug only, disable JIT)\n\
\    -Xtm              Method tracing (debug only, disable JIT)

#
# Reusable JVM option
#
reusable.xusage= \
There are additional options for use with the Persistent Reusable JVM.\n\
\    -Xinitth          Initial size of the transient heap\n\
\    -Xinitsh          Initial size of the system heap\n\
\    -Xinitacsh        Initial size of the shareable application heap\n\
\    -Xjvmset          Create or join a JVM set (shared classes)\n\
\    -Xresettable      Run the JVM in resettable mode\n\n\
These options are documented in the IBM manual SC34-6201-01, Chapter 2:\n\
"Persistent Reusable Java Virtual Machine User's Guide".\n\
This manual can be downloaded from:\n\
http://www-1.ibm.com/servers/eserver/zseries/software/java/pdf/prjvm14.pdf\n

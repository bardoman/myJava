package com.ibm.sdwb.build390;
/***********************************************************************************************
    A basic extension of the java.awt.Dialog class
 */
/***********************************************************************************************
// 04/27/99 errorHandling       change LogException parms & add new error types
// 01/07/2000 ind.buildlog file changes for logging into individual build log file for each build
// 02/16/2000 remove save button
// 06/09/2000 optiondialog      OptionDialog is not needed when the Build is MBABuild - if its there would result in nullpointer
// 05/28/2003 INT1136           added MVSServer/family
/***********************************************************************************************/
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.*;

import com.ibm.sdwb.build390.logprocess.LogEventGUIListener;
import com.ibm.sdwb.build390.userinterface.graphic.panels.OptionPanel;
import com.ibm.sdwb.build390.userinterface.graphic.widgets.CancelableAction;

public class MBBuildEdit extends MBInternalFrame {
    private MBBuild build;
    private MBButtonPanel buttonPanel;
    private JMenuItem btSetup         = new JMenuItem("Setup");
    private JMenuItem btOptions = new JMenuItem("Build Options");
    //{{DECLARE_CONTROLS
    JButton btnQuit;
//	JButton btnSave;
    JLabel label1;
    JLabel labelMVSRelease;
    JLabel labelMVSHlq;
    JLabel label2;
    JLabel label3;
    JLabel label4;
    JLabel label5;
    JLabel label6;
    JLabel label7;
    JLabel label8;
    JLabel label9;
    JLabel label10;
    JTextField tfRelease;
    JTextField tfMVSRelease;
    JTextField tfMVSHlq;
    JTextField tfDriver;
    JTextField tfBuildtype;
    JCheckBox cbControlled;
    JTextField tfDescr;
    JTextField tfDate;
    JTextField tfServer;
    JTextField tfStatus;
    JTextField tfCMVCFamily;
    JButton btnOpen;
    JComboBox chBuildid;
    JLabel label11;
    JCheckBox cbDelta;
    GridBagLayout gridBag;
    JInternalFrame parentFrame;

    JPanel centerPanel;
    LogEventGUIListener loggui;

    public MBBuildEdit(String title, JInternalFrame pFrame, MBBuild tempBuild) throws com.ibm.sdwb.build390.MBBuildException
    {
        super(title, false, null);
        build = tempBuild;
        parentFrame = pFrame;
        initializeDialog();

        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        //{{INIT_CONTROLS
        // if no build id was passed in, init the buildid choice
        if (build == null) {
            String [] files = null;
            File dir = new File(MBGlobals.Build390_path+buildDirectory());
            files = dir.list(new CommandFilter());
            for (int i=0; i < files.length; i++) {
                String filePath = MBGlobals.Build390_path+buildDirectory()+files[i]+File.separator+MBConstants.BUILDSAVEFILE;
                if ((new File(filePath)).exists()) {
                    chBuildid.addItem(files[i]);
                }
            }
        }
        // if a build id was passed in load that build
        else {
            buildLoad(null);
            btnOpen.setVisible(false);
            chBuildid.addItem(build.get_buildid());
        }
    }

    protected void initializeDialog() {
        gridBag = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        c.weighty = 1;
        c.gridx  = 1;
        centerPanel = new JPanel(gridBag);
        getContentPane().setLayout(new BorderLayout());
        setVisible(false);
        setForeground(MBGuiConstants.ColorRegularText);
        setBackground(MBGuiConstants.ColorGeneralBackground);
        label1 = new JLabel("Build ID");
        c.gridy = 1;
        gridBag.setConstraints(label1, c);
        centerPanel.add(label1);
        label2 = new JLabel("Library Release");
        c.gridy = 2;
        gridBag.setConstraints(label2, c);
        centerPanel.add(label2);
        labelMVSRelease = new JLabel("MVS Release");
        c.gridy = 3;
        gridBag.setConstraints(labelMVSRelease, c);
        centerPanel.add(labelMVSRelease);
        labelMVSHlq = new JLabel("MVS HLQ");
        c.gridy = 4;
        gridBag.setConstraints(labelMVSHlq, c);
        centerPanel.add(labelMVSHlq);
        label3 = new JLabel("Driver");
        c.gridy = 5;
        gridBag.setConstraints(label3, c);
        centerPanel.add(label3);
        label4 = new JLabel("Build Type");
        c.gridy = 6;
        gridBag.setConstraints(label4, c);
        centerPanel.add(label4);
        label6 = new JLabel("Description");
        c.gridy = 7;
        gridBag.setConstraints(label6, c);
        centerPanel.add(label6);
        label7 = new JLabel("Date");
        c.gridy = 8;
        gridBag.setConstraints(label7, c);
        centerPanel.add(label7);
        label8 = new JLabel("MVS Server");
        c.gridy = 9;
        gridBag.setConstraints(label8, c);
        centerPanel.add(label8);

        JLabel label8A = new JLabel("CMVC Family");
        c.gridy = 10;
        gridBag.setConstraints(label8A, c);
        centerPanel.add(label8A);
        label9 = new JLabel("Status");
        c.gridy = 11;
        gridBag.setConstraints(label9, c);
        centerPanel.add(label9);
        c.gridx = 2;
        c.weightx = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        chBuildid = new JComboBox();
        chBuildid.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 1;
        gridBag.setConstraints(chBuildid, c);
        centerPanel.add(chBuildid);
        c.gridwidth = GridBagConstraints.REMAINDER;
        tfRelease = new JTextField();
        tfRelease.setEditable(false);
        c.gridy = 2;
        gridBag.setConstraints(tfRelease, c);
        tfRelease.setBackground(MBGuiConstants.ColorFieldBackground);
        centerPanel.add(tfRelease);
        tfMVSRelease = new JTextField();
        tfMVSRelease.setEditable(false);
        c.gridy = 3;
        gridBag.setConstraints(tfMVSRelease, c);
        tfMVSRelease.setBackground(MBGuiConstants.ColorFieldBackground);
        centerPanel.add(tfMVSRelease);
        tfMVSHlq = new JTextField();
        tfMVSHlq.setEditable(false);
        c.gridy = 4;
        gridBag.setConstraints(tfMVSHlq, c);
        tfMVSHlq.setBackground(MBGuiConstants.ColorFieldBackground);
        centerPanel.add(tfMVSHlq);
        tfDriver = new JTextField();
        tfDriver.setEditable(false);
        tfDriver.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 5;
        gridBag.setConstraints(tfDriver, c);
        centerPanel.add(tfDriver);
        tfBuildtype = new JTextField();
        tfBuildtype.setEditable(false);
        tfBuildtype.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 6;
        gridBag.setConstraints(tfBuildtype, c);
        centerPanel.add(tfBuildtype);
        tfDescr = new JTextField();
        tfDescr.setEditable(false);
        tfDescr.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 7;
        gridBag.setConstraints(tfDescr, c);
        centerPanel.add(tfDescr);
        tfDate = new JTextField();
        tfDate.setEditable(false);
        tfDate.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 8;
        gridBag.setConstraints(tfDate, c);
        centerPanel.add(tfDate);
        tfServer = new JTextField();
        tfServer.setEditable(false);
        tfServer.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 9;
        gridBag.setConstraints(tfServer, c);
        centerPanel.add(tfServer);
        tfCMVCFamily = new JTextField();
        tfServer.setEditable(false);
        tfServer.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 10;
        gridBag.setConstraints(tfCMVCFamily, c);
        centerPanel.add(tfCMVCFamily);
        tfStatus = new JTextField();
        tfStatus.setEditable(false);
        tfStatus.setBackground(MBGuiConstants.ColorFieldBackground);
        c.gridy = 11;
        gridBag.setConstraints(tfStatus, c);
        centerPanel.add(tfStatus);
        btnOpen = new JButton("Open");
        btnOpen.setForeground(MBGuiConstants.ColorRegularText);
        c.gridx = 3;
        c.gridy = 1;
        c.fill = GridBagConstraints.NONE;
        gridBag.setConstraints(btnOpen, c);
        centerPanel.add(btnOpen);
        JMenu setupMenu = new JMenu("Info");
        getJMenuBar().add(setupMenu);
        setupMenu.add(btSetup);
        setupMenu.add(btOptions);
        btnQuit = new JButton("Close");
        btnQuit.setForeground(MBGuiConstants.ColorCancelButton);
        Vector actionButtons = new Vector();
        buttonPanel = new MBButtonPanel(null, btnQuit, actionButtons);
        JScrollPane centerScroller = new JScrollPane(centerPanel);
        getContentPane().add("Center", centerScroller);
        getContentPane().add("South", buttonPanel);

        // listener for the quit button
        btnQuit.addActionListener(new ActionListener() {
                                      public void actionPerformed(ActionEvent evt) {
                                          dispose();
                                      }
                                  } );

        // listener for the open button
        btnOpen.addActionListener(new ActionListener() {
                                      public void actionPerformed(ActionEvent evt) {
                                          try {
                                              String bid  = new String();
                                              // find out if anything is in the buildid field
                                              bid = (String) chBuildid.getSelectedItem();
                                              if (bid.length() > 0) buildLoad(bid);
                                          } catch (MBBuildException mbe) {
                                              lep.LogException(mbe);
                                          }
                                      }
                                  } );
        btSetup.addActionListener(new MBCancelableActionListener(thisFrame) {
                                      public void doAction(ActionEvent evt) {
                                          lep.LogSecondaryInfo("Debug","MBBuildEdit:btSetup:Entry");
                                          java.util.List setupList = new java.util.LinkedList();
                                          setupList.add(build.getSetup());
                                          com.ibm.sdwb.build390.userinterface.graphic.panels.setup.SetupInformation tempSetupDialog = new com.ibm.sdwb.build390.userinterface.graphic.panels.setup.SetupInformation(thisFrame,setupList);
                                          build.setSetup(tempSetupDialog.getSetup());
                                      }
                                  } );
        btOptions.addActionListener(new MBCancelableActionListener(thisFrame) {
                                        public void doAction(ActionEvent evt) {
                                            // open the option dialog
                                            MBInternalFrame frame = new MBInternalFrame("Build Options",true,getLEP());
                                            
                                            final OptionPanel optionPanel = new OptionPanel(build.getOptions(), build.getSetup(), null,thisFrame);
                                            optionPanel.setJustDisplay(true);
                                            frame.getContentPane().add(BorderLayout.CENTER,optionPanel);
                                            frame.addButtonPanel(null,new Vector());
                                            optionPanel.setEnabled(false);
                                            frame.setVisible(true);
                                        }
                                    });
    }


    public void displayBuildInfo(MBBuild build) {
        tfMVSRelease.setText(build.getReleaseInformation().getMvsName());
        tfMVSHlq.setText(build.getReleaseInformation().getMvsHighLevelQualifier());
        tfRelease.setText(build.getReleaseInformation().getLibraryName());
        tfDriver.setText(build.getDriverInformation().getName());
        tfBuildtype.setText(build.get_buildtype());
        tfDescr.setText(build.get_descr());
        tfDate.setText(build.get_date().toString());
        tfServer.setText(build.getSetup().getMainframeInfo().getMainframeAddress());
        tfCMVCFamily.setText(build.getLibraryInfo().getProcessServerAddress());
        if (build.getProcessForThisBuild()!=null) {
            if(build.getProcessForThisBuild().getStepsThatHaveRun()!=null && !build.getProcessForThisBuild().getStepsThatHaveRun().isEmpty()){
                tfStatus.setText("Last step that ran => "+((com.ibm.sdwb.build390.process.AbstractProcess.RepeatedProcessStep)((java.util.LinkedList)build.getProcessForThisBuild().getStepsThatHaveRun()).getLast()).getStep().getName());
            } else{
                tfStatus.setText("Last step that ran =>  none.");
            }
        }else {
            tfStatus.setText("Last step that ran =>  none.");
        }
        /* if (build.get_status() == null) {
             tfStatus.setText("");
         } else if (build.get_status().equals(MBConstants.PROCESSBUILDPHASE)) {
             try {
                 MBDrReport drReport = new MBDrReport(build, ((MBAnimationStatusWindow)parentFrame) .getStatus(),lep);
                 drReport.initializeReport(false);
                 java.util.List phases = drReport.getPhaseInforamtion(build.get_buildtype());
                 tfStatus.setText("Host Phase - "+ ((com.ibm.sdwb.build390.mainframe.PhaseInformation) phases.get(build.get_hostBuildPhase())).getName());
             } catch (MBBuildException mbe) {
                 lep.LogException(mbe);
             }
         } else {
             tfStatus.setText(build.get_status());
         }
         */
    }

    /** buildLoad loads a build file and populates the buildedit dialog with its data.
    * @param bid - A String containing the build id to load */
    public void buildLoad(String bid) throws com.ibm.sdwb.build390.MBBuildException{
        if (bid != null) {
            build = (MBBuild) MBBuildLoader.loadBuild(bid, MBGlobals.Build390_path+buildDirectory());
        }
        if (build != null) {
            displayBuildInfo(build);
        }
    }

    public Dimension getPreferredSize() {
        Dimension old = super.getPreferredSize();

        if (old.width < 250) {
            old.width = 250;
        }
        return old;
    }

    public int getBottomRow() {
        return 12;
    }

    protected String buildDirectory() {
        return MBConstants.GENERICBUILDDIRECTORY;
    }

    /** The CommandFilter class creates a list of B* files and do not contain a . */
    class CommandFilter implements FilenameFilter {
        public boolean accept(File dir, String name) {
            return new File(dir, name).exists();
        }
    }
}
